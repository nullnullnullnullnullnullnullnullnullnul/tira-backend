openapi: 3.0.1
info:
  title: Tira API Rest
  version: 1.0.0
  description: API REST for users and teams using PostgreSQL
servers:
  - url: http://localhost:3000
    description: Api service for Tira implementation
paths:


# =============
# === USERS ===


  /users:
    get:
      summary: List users with optional filters
      tags:
        - Users
      description: Lists all users, optionally filtered by username, email, role, or user_id, with pagination.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Filter by username
        - in: query
          name: email
          schema:
            type: string
          description: Filter by email
        - in: query
          name: role
          schema:
            type: string
            enum: [leader, user]
          description: Filter by role
        - in: query
          name: user_id
          schema:
            type: string
          description: Filter by user ID
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of records to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of records to return
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - role
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                role:
                  type: string
                  enum: [leader, user]
                  example: "user"
                password:
                  type: string
                  example: "MyS3cretP@ss"
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{user_id}:
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

    patch:
      summary: Update a user
      description: Updates a user's username, email, or password.
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newUsername"
                email:
                  type: string
                  format: email
                  example: "new@example.com"
                password:
                  type: string
                  example: "NewP@ssw0rd"
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: No fields provided or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No fields provided to update"


# =============
# === TEAMS ===


  /teams:
    post:
      summary: Create a new team
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - owner_id
                - name
              properties:
                owner_id:
                  type: string
                  example: "u123"
                name:
                  type: string
                  example: "Marketing Team"
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

  /teams/user/{user_id}:
    get:
      summary: Get all teams a user is in
      tags:
        - Teams
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            example: "u123"
      responses:
        '200':
          description: Array of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          description: User not found or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /teams/{team_id}:
    patch:
      summary: Update a team name
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "New Team Name"
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

    delete:
      summary: Delete a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      responses:
        '200':
          description: Team deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Team not found"

  /teams/{team_id}/members:
    get:
      summary: List all members of a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid team_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid team ID"

    post:
      summary: Add a user to a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  example: "u123"
      responses:
        '201':
          description: User added to team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

  /teams/{team_id}/members/{user_id}:
    delete:
      summary: Remove a user from a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            example: "u123"
      responses:
        '204':
          description: User removed successfully (no content)
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Member not found"


# =============
# === TASKS ===


  /tasks:
    get:
      summary: List tasks with optional filters
      tags:
        - Tasks
      description: Lists all tasks, optionally filtered by various criteria with pagination.
      parameters:
        - in: query
          name: task_id
          schema:
            type: string
          description: Filter by task ID
        - in: query
          name: team_id
          schema:
            type: string
          description: Filter by team ID
        - in: query
          name: assigned_to
          schema:
            type: string
          description: Filter by assigned user ID
        - in: query
          name: created_by
          schema:
            type: string
          description: Filter by creator user ID
        - in: query
          name: title
          schema:
            type: string
          description: Filter by title (partial match, case insensitive)
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, ongoing, done, canceled]
          description: Filter by status
        - in: query
          name: priority
          schema:
            type: string
            enum: [high, medium, low]
          description: Filter by priority
        - in: query
          name: date_start
          schema:
            type: string
            format: date-time
          description: Filter tasks with deadline >= this date
        - in: query
          name: date_end
          schema:
            type: string
            format: date-time
          description: Filter tasks with deadline <= this date
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of records to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of records to return
      responses:
        '200':
          description: Array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

    post:
      summary: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - created_by
                - team_id
                - assigned_to
                - title
                - status
                - priority
                - deadline
              properties:
                created_by:
                  type: string
                  example: "01JXXXXXXXXXXXXXXXXXX"
                  description: "TODO: Will be removed when JWT auth is implemented"
                team_id:
                  type: string
                  example: "01JYYYYYYYYYYYYYYYYYY"
                assigned_to:
                  type: string
                  example: "01JZZZZZZZZZZZZZZZZZZ"
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "Implement authentication"
                description:
                  type: string
                  nullable: true
                  example: "Add JWT authentication to the API"
                status:
                  type: string
                  enum: [pending, ongoing, done, canceled]
                  example: "pending"
                priority:
                  type: string
                  enum: [high, medium, low]
                  example: "high"
                deadline:
                  type: string
                  format: date-time
                  example: "2025-12-31T23:59:59Z"
                content:
                  type: string
                  nullable: true
                  example: "Additional task details or notes"
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid task title"

  /tasks/{task_id}:
    get:
      summary: Get a single task by ID
      tags:
        - Tasks
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task to retrieve
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found"

    patch:
      summary: Update a task
      tags:
        - Tasks
      description: Updates one or more fields of a task. All fields are optional.
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assigned_to:
                  type: string
                  example: "01JAAAAAAAAAAAAAAAAAA"
                title:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: "Updated task title"
                description:
                  type: string
                  nullable: true
                  example: "Updated description"
                status:
                  type: string
                  enum: [pending, ongoing, done, canceled]
                  example: "ongoing"
                priority:
                  type: string
                  enum: [high, medium, low]
                  example: "medium"
                deadline:
                  type: string
                  format: date-time
                  example: "2026-01-15T23:59:59Z"
                content:
                  type: string
                  nullable: true
                  example: "Updated content"
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input or no fields provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No fields to update"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found"

    delete:
      summary: Delete a task
      tags:
        - Tasks
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task to delete
      responses:
        '204':
          description: Task deleted successfully (no content)
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found"


# ============
# === TAGS ===


  /tags/teams/{team_id}:
    post:
      summary: Create a new tag
      tags:
        - Tags
      description: Creates a new tag for a specific team
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 20
                  pattern: '^[A-Za-z0-9 _-]+$'
                  example: "urgent"
                  description: "Tag name (1-20 characters, letters, numbers, spaces, underscores, hyphens)"
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid tag name"

    get:
      summary: Get all tags for a team
      tags:
        - Tags
      description: Retrieves all tags belonging to a specific team
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
      responses:
        '200':
          description: Array of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Team not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Team not found"

  /tags/teams/{team_id}/{tag_id}:
    get:
      summary: Get a specific tag
      tags:
        - Tags
      description: Retrieves a specific tag by ID
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
        - in: path
          name: tag_id
          required: true
          schema:
            type: string
          description: ID of the tag
          example: "01JXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tag not found"

    patch:
      summary: Update a tag name
      tags:
        - Tags
      description: Updates the name of an existing tag
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
        - in: path
          name: tag_id
          required: true
          schema:
            type: string
          description: ID of the tag
          example: "01JXXXXXXXXXXXXXXXXXX"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 20
                  pattern: '^[A-Za-z0-9 _-]+$'
                  example: "high-priority"
                  description: "New tag name (1-20 characters, letters, numbers, spaces, underscores, hyphens)"
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid tag name"

    delete:
      summary: Delete a tag
      tags:
        - Tags
      description: Deletes a tag and removes it from all associated tasks
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
        - in: path
          name: tag_id
          required: true
          schema:
            type: string
          description: ID of the tag
          example: "01JXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tag not found"

  /tags/teams/{team_id}/{tag_id}/tasks:
    get:
      summary: Get all tasks with a specific tag
      tags:
        - Tags
      description: Retrieves all tasks that have been assigned a specific tag
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
          description: ID of the team
          example: "01JYYYYYYYYYYYYYYYYYY"
        - in: path
          name: tag_id
          required: true
          schema:
            type: string
          description: ID of the tag
          example: "01JXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: Array of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tag not found"

  /tags/tasks/{task_id}:
    post:
      summary: Add a tag to a task
      tags:
        - Tags
      description: Associates a tag with a task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task
          example: "01JXXXXXXXXXXXXXXXXXX"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_id
              properties:
                tag_id:
                  type: string
                  example: "01JZZZZZZZZZZZZZZZZZZ"
                  description: "ID of the tag to add"
      responses:
        '201':
          description: Tag added to task successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTag'
        '400':
          description: Invalid input or tag already assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tag already assigned to this task"

    get:
      summary: Get all tags for a task
      tags:
        - Tags
      description: Retrieves all tags associated with a specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task
          example: "01JXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: Array of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found"

  /tags/tasks/{task_id}/{tag_id}:
    delete:
      summary: Remove a tag from a task
      tags:
        - Tags
      description: Removes the association between a tag and a task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task
          example: "01JXXXXXXXXXXXXXXXXXX"
        - in: path
          name: tag_id
          required: true
          schema:
            type: string
          description: ID of the tag
          example: "01JZZZZZZZZZZZZZZZZZZ"
      responses:
        '204':
          description: Tag removed from task successfully (no content)
        '404':
          description: Tag not found on task
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tag not found on task"


# ===============
# === COMMENTS ===


  /comments:
    get:
      summary: List comments with optional filters
      tags:
        - Comments
      description: Lists all comments, optionally filtered by comment_id, task_id, or author_id, with pagination.
      parameters:
        - in: query
          name: comment_id
          schema:
            type: string
          description: Filter by comment ID
        - in: query
          name: task_id
          schema:
            type: string
          description: Filter by task ID
        - in: query
          name: author_id
          schema:
            type: string
          description: Filter by author user ID
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of records to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of records to return
      responses:
        '200':
          description: Array of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found"

  /comments/tasks/{task_id}:
    post:
      summary: Create a new comment on a task
      tags:
        - Comments
      description: Creates a new comment associated with a specific task
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
          description: ID of the task to comment on
          example: "01JXXXXXXXXXXXXXXXXXX"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - author_id
                - content
              properties:
                author_id:
                  type: string
                  example: "01JYYYYYYYYYYYYYYYYYY"
                  description: "ID of the user creating the comment"
                content:
                  type: string
                  minLength: 1
                  maxLength: 300
                  example: "This task looks good, but we need to update the documentation."
                  description: "Comment content (1-300 characters)"
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Comment content must be between 1 and 300 characters"

  /comments/{comment_id}:
    patch:
      summary: Update a comment
      tags:
        - Comments
      description: Updates the content of an existing comment
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment to update
          example: "01JXXXXXXXXXXXXXXXXXX"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 300
                  example: "Updated comment text"
                  description: "New comment content (1-300 characters)"
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Comment content must be between 1 and 300 characters"

    delete:
      summary: Delete a comment
      tags:
        - Comments
      description: Deletes a comment by ID
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment to delete
          example: "01JXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Comment not found"


# ==================
# === COMPONENTS ===


components:
  schemas:
    User:
      type: object
      required:
        - user_id
        - username
        - email
        - role
        - created_at
        - pwd_hash
      properties:
        user_id:
          type: string
          example: "u123"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum:
            - leader
            - user
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2025-09-29T12:34:56Z"
        last_login:
          type: string
          format: date-time
          nullable: true
          example: null
        pwd_hash:
          type: string
          example: "$2b$10$abcdefghijklmnopqrstuv"

    UserFilter:
      type: object
      properties:
        user_id:
          type: string
          example: "u123"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum:
            - leader
            - user
          example: "user"

    Team:
      type: object
      required:
        - team_id
        - owner_id
        - name
        - created_at
      properties:
        team_id:
          type: string
          example: "t123"
        owner_id:
          type: string
          example: "u123"
        name:
          type: string
          example: "Marketing Team"
        created_at:
          type: string
          format: date-time
          example: "2025-09-29T12:34:56Z"

    TeamMember:
      type: object
      required:
        - team_members_id
        - team_id
        - user_id
        - role
      properties:
        team_members_id:
          type: string
          example: "tm123"
        team_id:
          type: string
          example: "t123"
        user_id:
          type: string
          example: "u123"
        role:
          type: string
          enum: [leader, user]
          example: "user"
        invited_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-29T13:00:00Z"
        joined_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-29T13:15:00Z"

    TeamFilter:
      type: object
      properties:
        id:
          type: string
          example: "t123"
        owner_id:
          type: string
          example: "u123"
        name:
          type: string
          example: "Marketing Team"

    Task:
      type: object
      required:
        - task_id
        - team_id
        - assigned_to
        - created_by
        - title
        - status
        - priority
        - deadline
        - last_modified_at
      properties:
        task_id:
          type: string
          example: "01JXXXXXXXXXXXXXXXXXX"
        team_id:
          type: string
          example: "01JYYYYYYYYYYYYYYYYYY"
        assigned_to:
          type: string
          example: "01JZZZZZZZZZZZZZZZZZZ"
        created_by:
          type: string
          example: "01JAAAAAAAAAAAAAAAAAA"
        title:
          type: string
          minLength: 3
          maxLength: 100
          example: "Implement authentication"
        description:
          type: string
          nullable: true
          example: "Add JWT authentication to the API"
        status:
          type: string
          enum: [pending, ongoing, done, canceled]
          example: "pending"
        priority:
          type: string
          enum: [high, medium, low]
          example: "high"
        deadline:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
        content:
          type: string
          nullable: true
          example: "Additional task details or notes"
        last_modified_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"

    TaskFilter:
      type: object
      properties:
        task_id:
          type: string
          example: "01JXXXXXXXXXXXXXXXXXX"
        team_id:
          type: string
          example: "01JYYYYYYYYYYYYYYYYYY"
        assigned_to:
          type: string
          example: "01JZZZZZZZZZZZZZZZZZZ"
        created_by:
          type: string
          example: "01JAAAAAAAAAAAAAAAAAA"
        title:
          type: string
          example: "authentication"
        status:
          type: string
          enum: [pending, ongoing, done, canceled]
          example: "pending"
        priority:
          type: string
          enum: [high, medium, low]
          example: "high"
        date_start:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        date_end:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"

    Tag:
          type: object
          required:
            - tag_id
            - team_id
            - name
          properties:
            tag_id:
              type: string
              example: "01JXXXXXXXXXXXXXXXXXX"
              description: "Unique identifier for the tag"
            team_id:
              type: string
              example: "01JYYYYYYYYYYYYYYYYYY"
              description: "ID of the team this tag belongs to"
            name:
              type: string
              minLength: 1
              maxLength: 20
              pattern: '^[A-Za-z0-9 _-]+$'
              example: "urgent"
              description: "Tag name (1-20 characters, letters, numbers, spaces, underscores, hyphens only)"

    TaskTag:
      type: object
      required:
        - task_tags_id
        - task_id
        - tag_id
      properties:
        task_tags_id:
          type: string
          example: "01JXXXXXXXXXXXXXXXXXX"
          description: "Unique identifier for the task-tag association"
        task_id:
          type: string
          example: "01JYYYYYYYYYYYYYYYYYY"
          description: "ID of the task"
        tag_id:
          type: string
          example: "01JZZZZZZZZZZZZZZZZZZ"
          description: "ID of the tag"

    Comment:
      type: object
      required:
        - comment_id
        - task_id
        - content
        - created_at
      properties:
        comment_id:
          type: string
          example: "01JXXXXXXXXXXXXXXXXXX"
          description: "Unique identifier for the comment"
        task_id:
          type: string
          example: "01JYYYYYYYYYYYYYYYYYY"
          description: "ID of the task this comment belongs to"
        author_id:
          type: string
          nullable: true
          example: "01JZZZZZZZZZZZZZZZZZZ"
          description: "ID of the user who created the comment (null if user deleted)"
        content:
          type: string
          nullable: true
          minLength: 1
          maxLength: 300
          example: "This is a comment on the task"
          description: "Comment content (1-300 characters)"
        created_at:
          type: string
          format: date-time
          example: "2025-10-06T14:30:00Z"
          description: "Timestamp when the comment was created"

    CommentFilter:
      type: object
      properties:
        comment_id:
          type: string
          example: "01JXXXXXXXXXXXXXXXXXX"
        task_id:
          type: string
          example: "01JYYYYYYYYYYYYYYYYYY"
        author_id:
          type: string
          example: "01JZZZZZZZZZZZZZZZZZZ"
