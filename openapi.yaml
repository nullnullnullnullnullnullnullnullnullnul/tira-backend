openapi: 3.0.1
info:
  title: Tira API Rest
  version: 1.0.0
  description: API REST for users and teams using PostgreSQL
servers:
  - url: http://localhost:3000
    description: Api service for Tira implementation
paths:


# =============
# === USERS ===


  /users:
    get:
      summary: List users with optional filters
      tags:
        - Users
      description: Lists all users, optionally filtered by username, email, role, or user_id, with pagination.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Filter by username
        - in: query
          name: email
          schema:
            type: string
          description: Filter by email
        - in: query
          name: role
          schema:
            type: string
            enum: [leader, user]
          description: Filter by role
        - in: query
          name: user_id
          schema:
            type: string
          description: Filter by user ID
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of records to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of records to return
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - role
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                role:
                  type: string
                  enum: [leader, user]
                  example: "user"
                password:
                  type: string
                  example: "MyS3cretP@ss"
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{user_id}:
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

    patch:
      summary: Update a user
      description: Updates a user's username, email, or password.
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newUsername"
                email:
                  type: string
                  format: email
                  example: "new@example.com"
                password:
                  type: string
                  example: "NewP@ssw0rd"
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: No fields provided or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No fields provided to update"


# =============
# === TEAMS ===


  /teams:
    post:
      summary: Create a new team
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - owner_id
                - name
              properties:
                owner_id:
                  type: string
                  example: "u123"
                name:
                  type: string
                  example: "Marketing Team"
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

  /teams/user/{user_id}:
    get:
      summary: Get all teams a user is in
      tags:
        - Teams
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            example: "u123"
      responses:
        '200':
          description: Array of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          description: User not found or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /teams/{team_id}:
    patch:
      summary: Update a team name
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "New Team Name"
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

    delete:
      summary: Delete a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      responses:
        '200':
          description: Team deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Team not found"

  /teams/{team_id}/members:
    get:
      summary: List all members of a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid team_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid team ID"

    post:
      summary: Add a user to a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  example: "u123"
      responses:
        '201':
          description: User added to team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"

  /teams/{team_id}/members/{user_id}:
    delete:
      summary: Remove a user from a team
      tags:
        - Teams
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: string
            example: "t123"
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            example: "u123"
      responses:
        '204':
          description: User removed successfully (no content)
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Member not found"

# ==================
# === COMPONENTS ===


components:
  schemas:
    User:
      type: object
      required:
        - user_id
        - username
        - email
        - role
        - created_at
        - pwd_hash
      properties:
        user_id:
          type: string
          example: "u123"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum:
            - leader
            - user
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2025-09-29T12:34:56Z"
        last_login:
          type: string
          format: date-time
          nullable: true
          example: null
        pwd_hash:
          type: string
          example: "$2b$10$abcdefghijklmnopqrstuv"

    UserFilter:
      type: object
      properties:
        user_id:
          type: string
          example: "u123"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum:
            - leader
            - user
          example: "user"

    Team:
      type: object
      required:
        - team_id
        - owner_id
        - name
        - created_at
      properties:
        team_id:
          type: string
          example: "t123"
        owner_id:
          type: string
          example: "u123"
        name:
          type: string
          example: "Marketing Team"
        created_at:
          type: string
          format: date-time
          example: "2025-09-29T12:34:56Z"

    TeamMember:
      type: object
      required:
        - team_members_id
        - team_id
        - user_id
        - role
      properties:
        team_members_id:
          type: string
          example: "tm123"
        team_id:
          type: string
          example: "t123"
        user_id:
          type: string
          example: "u123"
        role:
          type: string
          enum: [leader, user]
          example: "user"
        invited_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-29T13:00:00Z"
        joined_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-29T13:15:00Z"

    TeamFilter:
      type: object
      properties:
        id:
          type: string
          example: "t123"
        owner_id:
          type: string
          example: "u123"
        name:
          type: string
          example: "Marketing Team"
